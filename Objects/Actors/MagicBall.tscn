[gd_scene load_steps=16 format=2]

[ext_resource path="res://Assets/Materials/MagicBall.tres" type="Material" id=1]
[ext_resource path="res://Objects/Actors/MagicBall.gd" type="Script" id=2]
[ext_resource path="res://Assets/Sprites/fire_mask2.png" type="Texture" id=3]
[ext_resource path="res://Assets/Sound/magic_cast.ogg" type="AudioStream" id=4]
[ext_resource path="res://Assets/Sound/magic_explode.ogg" type="AudioStream" id=5]

[sub_resource type="QuadMesh" id=3]

[sub_resource type="SphereShape" id=4]
radius = 0.291215

[sub_resource type="Curve" id=5]
_data = [ Vector2( 0, 1 ), 0.0, 0.509833, 0, 0, Vector2( 1, 0 ), -3.93232, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=6]
curve = SubResource( 5 )

[sub_resource type="Curve" id=7]
min_value = -10.0
max_value = 20.0
_data = [ Vector2( 0, 16.6591 ), 0.0, 0.0, 0, 0, Vector2( 0.41048, 10 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=8]
curve = SubResource( 7 )

[sub_resource type="ParticlesMaterial" id=9]
spread = 180.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 1.0
tangential_accel_random = 0.4
tangential_accel_curve = SubResource( 8 )
damping = 5.65
scale = 16.0
scale_random = 0.5
scale_curve = SubResource( 6 )

[sub_resource type="Shader" id=10]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.3.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float alpha_scissor_threshold;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
uniform bool particles_anim_loop;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

float clamp_and_map_and_pow(float value, float istart, float istop, float ostart, float ostop, float p) {
	value = clamp(value, istart, istop);
	return pow(ostart + (ostop - ostart) * ((value - istart) / (istop - istart)), p);
}

float clamp_and_map(float value, float istart, float istop, float ostart, float ostop) {
	value = clamp(value, istart, istop);
	return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

float map(float value, float istart, float istop, float ostart, float ostop) {
	return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
	mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb;
	float distance_to_middle = distance(vec2(.5,.5),UV);
	ALBEDO = mix(ALBEDO, vec3(1.0), clamp_and_map_and_pow(distance_to_middle, .0, .12, 1.0, 0.0, 1.0));
	ALPHA = albedo_tex.r * albedo.a;
	//ALPHA_SCISSOR= .1;//alpha_scissor_threshold;
}
"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/albedo = Color( 0, 0.811765, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/alpha_scissor_threshold = 0.95
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/particles_anim_h_frames = 1
shader_param/particles_anim_v_frames = 1
shader_param/particles_anim_loop = false
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 3 )

[sub_resource type="QuadMesh" id=12]
material = SubResource( 11 )
size = Vector2( 0.03, 0.03 )

[node name="MagicBall" type="Spatial"]
script = ExtResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="."]
material_override = ExtResource( 1 )
mesh = SubResource( 3 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
material_override = ExtResource( 1 )
mesh = SubResource( 3 )

[node name="MeshInstance3" type="MeshInstance" parent="."]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0 )
material_override = ExtResource( 1 )
mesh = SubResource( 3 )

[node name="Lifetime" type="Timer" parent="."]
wait_time = 2.5
one_shot = true
autostart = true

[node name="MagicHitbox" type="Area" parent="."]
collision_layer = 0
collision_mask = 4

[node name="CollisionShape" type="CollisionShape" parent="MagicHitbox"]
shape = SubResource( 4 )

[node name="CollosionDetection" type="Area" parent="."]
collision_layer = 0

[node name="CollisionShape" type="CollisionShape" parent="CollosionDetection"]
shape = SubResource( 4 )

[node name="Explosion" type="Particles" parent="."]
emitting = false
amount = 20
one_shot = true
explosiveness = 0.97
process_material = SubResource( 9 )
draw_pass_1 = SubResource( 12 )

[node name="CastSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 4 )
volume_db = -2.0
autoplay = true
bus = "SFX"

[node name="ExplodeSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = -6.0
bus = "SFX"

[node name="OmniLight" type="OmniLight" parent="."]
light_color = Color( 0, 0.858824, 1, 1 )
light_cull_mask = 4294966271
omni_range = 2.55923
omni_attenuation = 2.46229

[connection signal="timeout" from="Lifetime" to="." method="_on_Lifetime_timeout"]
[connection signal="area_entered" from="MagicHitbox" to="." method="_on_MagicHitbox_area_entered"]
[connection signal="body_entered" from="CollosionDetection" to="." method="_on_CollosionDetection_body_entered"]

[gd_scene load_steps=5 format=2]

[ext_resource path="res://Assets/Sprites/fire_noise_test2.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.3.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx, unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float shoot_offset;

float clamp_and_map(float value, float istart, float istop, float ostart, float ostop) {
	value = clamp(value, istart, istop);
	return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
//	vec3 norm_cross1 = normalize(cross(CAMERA_MATRIX[2].xyz, vec3(1.0, 0.0, 0.0)));
//	vec3 norm_cross2 = normalize(cross(vec3(1.0, 0.0, 0.0), CAMERA_MATRIX[1].xyz));
//	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(vec4(1.0, 0.0, 0.0, 0.0),vec4(norm_cross1, 0.0),vec4(norm_cross2, 0.0),WORLD_MATRIX[3]);
//	vec3 norm_cross1 = -normalize(cross(CAMERA_MATRIX[1].xyz, vec3(0.0, 0.0, 1.0)));
//	vec3 norm_cross2 = -normalize(cross(vec3(0.0, 0.0, 1.0), CAMERA_MATRIX[0].xyz));
//	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(vec4(norm_cross1, 0.0),vec4(norm_cross2, 0.0),vec4(0.0, 0.0, 1.0, 0.0),WORLD_MATRIX[3]);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv + .8 *vec2(TIME, 0) + 2.0 *vec2(0.0, UV.x / 5.0) + .5 *vec2(0, UV.y + .5 * UV.x +  3.0*TIME+ .3  * sin(UV.x + 2.0*TIME)+ .2  * sin(2.0*TIME+3.0)));
	float dist_to_ymiddle = 1.0 - 2.0 *  abs(UV.y - .5);
	float dist_to_sine_ymiddle = 1.0 - 2.0 *  abs(UV.y + .01 *sin(UV.x * (3.5 + sin(3.0*TIME)) * float(UV.y < .5) + UV.x * (2.5 + sin(3.0*TIME)) * float(UV.y > .5)  + 2.0 * 3.0*TIME) - .5);
	float inner_beam = float(dist_to_sine_ymiddle > .85);
	float ishoot_offset = 1.0 - shoot_offset;
	float shoot = pow(clamp_and_map(abs(ishoot_offset - UV.x / uv1_scale.x), 0.0, .1, 0.0, 1.0), 4.0) * float(UV.x / uv1_scale.x > ishoot_offset);
	ALBEDO = albedo.rgb + vec3(inner_beam);
	ALPHA = clamp(albedo.a * shoot * (pow(albedo_tex.r, .5) * pow(dist_to_ymiddle, 3.0) + pow(dist_to_ymiddle, 4.0) + inner_beam), 0.0, 1.0);
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.933333, 0.356863, 0.882353, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 10, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/shoot_offset = 0.0
shader_param/texture_albedo = ExtResource( 1 )

[sub_resource type="QuadMesh" id=3]
size = Vector2( 10, 1 )

[node name="Laser" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 0.0286544, 0, 0.999589, 0, 1, 0, -0.999589, 0, 0.0286544, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )
material/0 = null

[gd_scene load_steps=4 format=2]

[sub_resource type="CubeMesh" id=4]
size = Vector3( 2, 2, 1 )

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_add,depth_draw_always;
uniform vec4 albedo : hint_color;

uniform float alpha_value : hint_range(0,1);

float clamp_and_map(float value, float istart, float istop, float ostart, float ostop) {
	value = clamp(value, istart, istop);
	return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

float map(float value, float istart, float istop, float ostart, float ostop) {
	return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

void light() {
	ALPHA = ATTENUATION.r * alpha_value;
	//ALPHA = clamp_and_map(1.0 - clamp(clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION * ALBEDO * 10.0).r, 0.0, 1.0), 0.0, 1.0, 0.0, alpha_value);
    DIFFUSE_LIGHT += clamp(dot(NORMAL, LIGHT), 0.0, 1.0) * ATTENUATION * ALBEDO;
}

void fragment() {
	ALBEDO = albedo.rgb;
	EMISSION = ALBEDO * 3.0;
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/albedo = Color( 0.968627, 1, 0, 0.647059 )
shader_param/alpha_value = 0.738

[node name="GodRay" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 0.987919, 0, 0, 0, 0.987919, 0, 0, 0, 0.987919, 0, 0, 0 )
layers = 1024
mesh = SubResource( 4 )
material/0 = SubResource( 3 )
